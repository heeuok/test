import telebot
import sqlite3
from telebot import types
import threading
import requests
from io import BytesIO

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_API_KEY' –Ω–∞ –≤–∞—à –∫–ª—é—á API Telegram Bot Father
bot = telebot.TeleBot('6340345708:AAHv5M58voClrGGL0HBJtfw81Z2AeUA_714')

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('store.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS products
                  (id INTEGER PRIMARY KEY AUTOINCREMENT, category TEXT, name TEXT, description TEXT, photo_url TEXT, price DECIMAL)''')
conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS admins
                  (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER)''')
conn.commit()



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
category_keyboard = types.ReplyKeyboardMarkup(row_width=1)  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —à–∏—Ä–∏–Ω—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ 4 –∫–Ω–æ–ø–∫–∏
category_keyboard.add(
    types.KeyboardButton("–¢–æ–≤–∞—Ä–∏ –¥–ª—è –±–ª–µ–∫–∞—É—Ç—É üïØÔ∏è"),
    types.KeyboardButton("–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä–∏ üöó"),
    types.KeyboardButton("–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞ üì±"),
    types.KeyboardButton("–¢–æ–≤–∞—Ä–∏ –¥–ª—è –∫—É—Ö–Ω—ñ üç≥"),
    types.KeyboardButton("–¢–æ–≤–∞—Ä–∏ –¥–ª—è –¥–æ–º—É üè°"),
    types.KeyboardButton("–ì–∞–¥–∂–µ—Ç–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ üéÆ"),
    types.KeyboardButton("–í—ñ–π—Å—å–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ ‚öîÔ∏è"),
    types.KeyboardButton("–ó–∞—Ä—è–¥–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏, —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ ‚òÄÔ∏è")
)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
categories = {
    '–¢–æ–≤–∞—Ä–∏ –¥–ª—è –±–ª–µ–∫–∞—É—Ç—É üïØÔ∏è': [],
    '–ó–∞—Ä—è–¥–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏, —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ ‚òÄÔ∏è': [],
    '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä–∏ üöó': [],
    '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞ üì±': [],
    '–¢–æ–≤–∞—Ä–∏ –¥–ª—è –∫—É—Ö–Ω—ñ üç≥': [],
    '–¢–æ–≤–∞—Ä–∏ –¥–ª—è –¥–æ–º—É üè°': [],
    '–ì–∞–¥–∂–µ—Ç–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ üéÆ': [],
    '–í—ñ–π—Å—å–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ ‚öîÔ∏è': []
}

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
db_lock = threading.Lock()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_login(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.send_message(user_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
        show_admin_panel(user_id)
    else:
        bot.send_message(user_id, "–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
def send_order_to_manager(user_id, order_text):
    manager_user_id = 1878470364, 5928940080, 1135187857  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    bot.send_message(manager_user_id, f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}:\n{order_text}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    admin_ids = [1878470364, 5928940080, 1135187857]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return user_id in admin_ids

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def show_admin_panel(user_id):
    admin_panel_keyboard = types.ReplyKeyboardMarkup(row_width=1)
    admin_panel_keyboard.add('–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä', '–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä',)
    bot.send_message(user_id, "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_panel_keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
def show_categories(user_id):
    bot.send_message(user_id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=category_keyboard)

image_path = '123.jpg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.send_message(user_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
        show_admin_panel(user_id)
    else:
        bot.send_message(user_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É!")
        show_categories(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def show_items_in_category(user_id, category):
    with db_lock:
        cursor.execute("SELECT name, description, photo_url, price FROM products WHERE category=?", (category,))
        items = cursor.fetchall()

    if not items:
        bot.send_message(user_id, "–£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
    else:
        for item in items:
            name, description, photo_url, price = item
            markup = types.InlineKeyboardMarkup()
            buy_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç–∏", url="https://t.me/prime_market_manager")
            markup.add(buy_button)
            message_text = f"<b>{name}</b>\n\n{description}\n\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞–∫ —Ñ–æ—Ç–æ
            try:
                image_data = requests.get(photo_url).content
                bot.send_photo(user_id, BytesIO(image_data), caption=message_text, parse_mode='HTML', reply_markup=markup)
            except Exception as e:
                bot.send_message(user_id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—É: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda message: message.text in categories.keys())
def handle_category(message):
    category = message.text
    user_id = message.from_user.id
    bot.send_message(user_id, f"–í–∏–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}")
    show_items_in_category(user_id, category)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"
@bot.message_handler(func=lambda message: message.text == '–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä')
def add_product(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
        bot.register_next_step_handler(message, add_product_name)
    else:
        bot.send_message(user_id, "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤—ã —Ç–æ–≤–∞—Ä–∞
def add_product_name(message):
    user_id = message.from_user.id
    product_name = message.text.strip()
    
    if product_name:
        bot.send_message(user_id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:", reply_markup=category_keyboard)
        bot.register_next_step_handler(message, add_product_category, product_name)
    else:
        bot.send_message(user_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
def add_product_category(message, product_name):
    user_id = message.from_user.id
    category = message.text
    
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    bot.register_next_step_handler(message, add_product_description, product_name, category)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def add_product_description(message, product_name, category):
    user_id = message.from_user.id
    description = message.text.strip()
    
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:")
    bot.register_next_step_handler(message, add_product_photo, product_name, category, description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
def add_product_photo(message, product_name, category, description):
    user_id = message.from_user.id
    photo_url = message.text.strip()
    
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (–≥—Ä–Ω):")
    bot.register_next_step_handler(message, add_product_price, product_name, category, description, photo_url)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_product_price(message, product_name, category, description, photo_url):
    user_id = message.from_user.id
    price_text = message.text.strip()
    
    try:
        price = float(price_text)
    except ValueError:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    with db_lock:
        cursor.execute("INSERT INTO products (category, name, description, photo_url, price) VALUES (?, ?, ?, ?, ?)", (category, product_name, description, photo_url, price))
        conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    try:
        image_data = requests.get(photo_url).content
        bot.send_photo(user_id, BytesIO(image_data), caption=f"–¢–æ–≤–∞—Ä '{product_name}' –¥–æ–¥–∞–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{category}'.\n\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω", parse_mode='HTML')
    except Exception as e:
        bot.send_message(user_id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ–≤–∞—Ä—É: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä"
@bot.message_handler(func=lambda message: message.text == '–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä')
def delete_product(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        bot.register_next_step_handler(message, delete_product_confirm)
    else:
        bot.send_message(user_id, "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def delete_product_confirm(message):
    user_id = message.from_user.id
    product_name = message.text.strip()
    
    with db_lock:
        cursor.execute("DELETE FROM products WHERE name=?", (product_name,))
        conn.commit()
    
    bot.send_message(user_id, f"–¢–æ–≤–∞—Ä '{product_name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def view_orders(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        bot.send_message(user_id, "–í–∏–±–∞—á—Ç–µ, —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
    else:
        bot.send_message(user_id, "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ö–æ—Ä–∑–∏–Ω–∞"
@bot.message_handler(func=lambda message: message.text == '–ö–æ—Ä–∑–∏–Ω–∞')
def show_cart(message):
    user_id = message.from_user.id
    if user_id in user_cart:
        cart_items = user_cart[user_id]
        if cart_items:
            cart = "\n".join(cart_items)
            bot.send_message(user_id, f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart}")
        else:
            bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(lambda query: query.data.startswith('add_to_cart_'))
def add_to_cart_callback(query):
    user_id = query.from_user.id
    product_name = query.data.replace('add_to_cart_', '').strip()
    
    if user_id not in user_cart:
        user_cart[user_id] = []
    
    user_cart[user_id].append(product_name)
    bot.answer_callback_query(query.id, text=f"{product_name} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(lambda query: query.data.startswith('add_to_cart_'))
def add_to_cart_callback(query):
    user_id = query.from_user.id
    product_name = query.data.replace('add_to_cart_', '').strip()
    
    if user_id not in user_cart:
        user_cart[user_id] = []
    
    user_cart[user_id].append(product_name)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç–∏" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    buy_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç–∏", url="https://t.me/prime_market_manager")
    markup = types.InlineKeyboardMarkup().add(buy_button)
    bot.send_message(user_id, f"–í–∏ –¥–æ–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä '{product_name}' –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=markup)
    bot.answer_callback_query(query.id, text=f"–í–∏ –¥–æ–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä '{product_name}' –≤ –∫–æ—Ä–∑–∏–Ω—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(commands=['delete_all_products'])
def delete_all_products(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        with db_lock:
            cursor.execute("DELETE FROM products")
            conn.commit()
        bot.send_message(user_id, "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º–∞–≥–∞–∑–∏–Ω—É.")
    else:
        bot.send_message(user_id, "–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")


# –£–¥–∞–ª–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ö—É–ø–∏—Ç–∏"
# @bot.callback_query_handler(lambda query: query.data.startswith('buy_'))
# def buy_callback(query):
#     user_id = query.from_user.id
#     product_name = query.data.replace('buy_', '').strip()
    
#     if user_id in user_cart:
#         cart_items = user_cart[user_id]
#         if product_name in cart_items:
#             cart_items.remove(product_name)
#             bot.answer_callback_query(query.id, text=f"–í–∏ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä: {product_name}")
#         else:
#             bot.answer_callback_query(query.id, text=f"–¢–æ–≤–∞—Ä {product_name} –≤–∂–µ –±—É–ª–æ –∫—É–ø–ª–µ–Ω–æ.")
#     else:
#         bot.answer_callback_query(query.id, text=f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ—é.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def show_admin_panel(user_id):
    admin_panel_keyboard = types.ReplyKeyboardMarkup(row_width=1)
    admin_panel_keyboard.add('–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä', '–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä', '–í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ')
    bot.send_message(user_id, "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_panel_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"
@bot.message_handler(func=lambda message: message.text == '–í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ')
def exit_admin_panel(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
    show_categories(user_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    user_cart = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.polling(none_stop=True)




